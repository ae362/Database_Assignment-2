"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

import pymongo

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-q#jzop4q+7vjtu756+im07!v3-k*1)se&$2b+o)hlty1nkjir^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

AUTH_USER_MODEL = 'appointments.User'
# Application definition
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'appointments',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
       'appointments.mongo_auth.MongoJWTAuthentication',
       'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'JSON_ENCODER': 'your_app.mongodb_utils.MongoJSONEncoder',
}
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

ROOT_URLCONF = 'backend.urls'
JWT_SECRET_KEY = 'django-insecure-5c7d8f3e1a6b9c2d5e8f7a4b1c3d6e9f2a5b8c1d4e7f3a6b9c2d5e8'
# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # For development only, restrict in production
CORS_ALLOW_CREDENTIALS = True

# Or specify allowed origins:
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]

# CSRF settings
CSRF_TRUSTED_ORIGINS = ['http://localhost:3000']
CSRF_COOKIE_SAMESITE = 'Lax'  # Use 'None' if your frontend and backend are on different domains
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS
CSRF_COOKIE_HTTPONLY = False  # Must be False to allow JavaScript to read the cookie
CSRF_USE_SESSIONS = False  # Use cookies instead of sessions
CSRF_COOKIE_NAME = 'csrftoken'  # Default name, but explicitly set for clarity

# CORS settings
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

DEFAULT_FROM_EMAIL = 'elayoub407@gmail.com'  
EMAIL_BACKEND = 'sendgrid_backend.SendgridBackend'
SENDGRID_SANDBOX_MODE_IN_DEBUG = False
SENDGRID_API_KEY = 'SG.' # paste the key after the dot
# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
MONGODB_URI = 'mongodb+srv://elayoub407:MVmL7Axgvj4Ia4MR@hcams.8au6zot.mongodb.net/'
MONGODB_NAME = 'Hcams'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

MONGODB_INDEXES = [
    # User/Patient collection indexes
    {
        'collection': 'users',
        'fields': [('id', pymongo.ASCENDING)],
        'unique': True
    },
    {
        'collection': 'users',
        'fields': [('email', pymongo.ASCENDING)],
        'unique': True
    },
    {
        'collection': 'users',
        'fields': [('username', pymongo.ASCENDING)],
        'unique': True
    },
    {
        'collection': 'users',
        'fields': [('role', pymongo.ASCENDING)]
    },
    {
        'collection': 'users',
        'fields': [('first_name', pymongo.ASCENDING), ('last_name', pymongo.ASCENDING)]
    },
    {
        'collection': 'users',
        'fields': [('phone', pymongo.ASCENDING)]
    },
    {
        'collection': 'users',
        'fields': [('birthday', pymongo.ASCENDING)]
    },
    {
        'collection': 'users',
        'fields': [('gender', pymongo.ASCENDING)]
    },
    {
        'collection': 'users',
        'fields': [('recent_doctor_id', pymongo.ASCENDING)]
    },
    
    # Doctor collection indexes
    {
        'collection': 'doctors',
        'fields': [('id', pymongo.ASCENDING)],
        'unique': True
    },
    {
        'collection': 'doctors',
        'fields': [('email', pymongo.ASCENDING)],
        'unique': True
    },
    {
        'collection': 'doctors',
        'fields': [('name', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctors',
        'fields': [('user_id', pymongo.ASCENDING)],
        'unique': True,
        'sparse': True
    },
    {
        'collection': 'doctors',
        'fields': [('specialization', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctors',
        'fields': [('qualification', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctors',
        'fields': [('experience_years', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctors',
        'fields': [('consultation_fee', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctors',
        'fields': [('medical_center_id', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctors',
        'fields': [('is_available', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctors',
        'fields': [('emergency_available', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctors',
        'fields': [('daily_patient_limit', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctors',
        'fields': [('specialization', pymongo.ASCENDING), ('is_available', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctors',
        'fields': [('specialization', pymongo.ASCENDING), ('experience_years', pymongo.DESCENDING)]
    },
    {
        'collection': 'doctors',
        'fields': [('specialization', pymongo.ASCENDING), ('consultation_fee', pymongo.ASCENDING)]
    },
    
    # Medical Center collection indexes
    {
        'collection': 'medical_centers',
        'fields': [('id', pymongo.ASCENDING)],
        'unique': True
    },
    {
        'collection': 'medical_centers',
        'fields': [('name', pymongo.ASCENDING)]
    },
    {
        'collection': 'medical_centers',
        'fields': [('email', pymongo.ASCENDING)],
        'sparse': True
    },
    {
        'collection': 'medical_centers',
        'fields': [('phone', pymongo.ASCENDING)]
    },
    
    # Appointment collection indexes
    {
        'collection': 'appointments',
        'fields': [('id', pymongo.ASCENDING)],
        'unique': True
    },
    {
        'collection': 'appointments',
        'fields': [('date', pymongo.DESCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('status', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('patient_id', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('doctor_id', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('patient_name', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('doctor_name', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('patient_phone', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('blood_type', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('reason_for_visit', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('doctor_id', pymongo.ASCENDING), ('date', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('patient_id', pymongo.ASCENDING), ('status', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('doctor_id', pymongo.ASCENDING), ('status', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('doctor_id', pymongo.ASCENDING), ('date', pymongo.ASCENDING), ('status', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointments',
        'fields': [('doctor_id', pymongo.ASCENDING), ('date', pymongo.ASCENDING)],
        'unique': True,
        'partialFilterExpression': {'status': 'scheduled'}
    },
    
    # Doctor Availability collection indexes
    {
        'collection': 'doctor_availability',
        'fields': [('doctor_id', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctor_availability',
        'fields': [('day_of_week', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctor_availability',
        'fields': [('start_time', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctor_availability',
        'fields': [('end_time', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctor_availability',
        'fields': [('doctor_id', pymongo.ASCENDING), ('day_of_week', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctor_availability',
        'fields': [('doctor_id', pymongo.ASCENDING), ('day_of_week', pymongo.ASCENDING), ('is_available', pymongo.ASCENDING)]
    },
    
    # Availability Exception collection indexes
    {
        'collection': 'availability_exceptions',
        'fields': [('doctor_id', pymongo.ASCENDING)]
    },
    {
        'collection': 'availability_exceptions',
        'fields': [('date', pymongo.ASCENDING)]
    },
    {
        'collection': 'availability_exceptions',
        'fields': [('doctor_id', pymongo.ASCENDING), ('date', pymongo.ASCENDING)],
        'unique': True
    },
    {
        'collection': 'availability_exceptions',
        'fields': [('doctor_id', pymongo.ASCENDING), ('date', pymongo.ASCENDING), ('is_available', pymongo.ASCENDING)]
    },
    
    # Medical Examination collection indexes
    {
        'collection': 'medical_examinations',
        'fields': [('id', pymongo.ASCENDING)],
        'unique': True
    },
    {
        'collection': 'medical_examinations',
        'fields': [('patient_id', pymongo.ASCENDING)]
    },
    {
        'collection': 'medical_examinations',
        'fields': [('doctor_id', pymongo.ASCENDING)]
    },
    {
        'collection': 'medical_examinations',
        'fields': [('date', pymongo.DESCENDING)]
    },
    {
        'collection': 'medical_examinations',
        'fields': [('examination_type', pymongo.ASCENDING)]
    },
    {
        'collection': 'medical_examinations',
        'fields': [('patient_name', pymongo.ASCENDING)]
    },
    {
        'collection': 'medical_examinations',
        'fields': [('doctor_name', pymongo.ASCENDING)]
    },
    {
        'collection': 'medical_examinations',
        'fields': [('patient_id', pymongo.ASCENDING), ('date', pymongo.DESCENDING)]
    },
    {
        'collection': 'medical_examinations',
        'fields': [('doctor_id', pymongo.ASCENDING), ('date', pymongo.DESCENDING)]
    },
    {
        'collection': 'medical_examinations',
        'fields': [('patient_id', pymongo.ASCENDING), ('examination_type', pymongo.ASCENDING)]
    },
    
    # Doctor Booking History collection indexes
    {
        'collection': 'doctor_booking_history',
        'fields': [('doctor_id', pymongo.ASCENDING)],
        'unique': True
    },
    {
        'collection': 'doctor_booking_history',
        'fields': [('bookings.appointment_id', pymongo.ASCENDING)]
    },
    {
        'collection': 'doctor_booking_history',
        'fields': [('bookings.date', pymongo.DESCENDING)]
    },
    
    # Analytics collections
    {
        'collection': 'appointment_analytics',
        'fields': [('date', pymongo.DESCENDING)]
    },
    {
        'collection': 'appointment_analytics',
        'fields': [('doctor_id', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointment_analytics',
        'fields': [('patient_id', pymongo.ASCENDING)]
    },
    {
        'collection': 'appointment_analytics',
        'fields': [('status_counts.status', pymongo.ASCENDING)]
    },
    
    # User activity tracking
    {
        'collection': 'user_activity',
        'fields': [('user_id', pymongo.ASCENDING)]
    },
    {
        'collection': 'user_activity',
        'fields': [('timestamp', pymongo.DESCENDING)]
    },
    {
        'collection': 'user_activity',
        'fields': [('action_type', pymongo.ASCENDING)]
    },
    {
        'collection': 'user_activity',
        'fields': [('user_id', pymongo.ASCENDING), ('action_type', pymongo.ASCENDING)]
    },
    {
        'collection': 'user_activity',
        'fields': [('user_id', pymongo.ASCENDING), ('timestamp', pymongo.DESCENDING)]
    },
    
    # System logs
    {
        'collection': 'system_logs',
        'fields': [('timestamp', pymongo.DESCENDING)]
    },
    {
        'collection': 'system_logs',
        'fields': [('level', pymongo.ASCENDING)]
    },
    {
        'collection': 'system_logs',
        'fields': [('source', pymongo.ASCENDING)]
    },
    {
        'collection': 'system_logs',
        'fields': [('level', pymongo.ASCENDING), ('timestamp', pymongo.DESCENDING)]
    }
]

# Text indexes need to be created separately
MONGODB_TEXT_INDEXES = [
    {
        'collection': 'users',
        'fields': [
            ('first_name', 'text'), 
            ('last_name', 'text'), 
            ('email', 'text'),
            ('address', 'text'),
            ('medical_history', 'text'),
            ('chronic_diseases', 'text')
        ],
        'name': 'user_text_search'
    },
    {
        'collection': 'doctors',
        'fields': [
            ('name', 'text'), 
            ('specialization', 'text'), 
            ('bio', 'text'),
            ('qualification', 'text')
        ],
        'name': 'doctor_text_search'
    },
    {
        'collection': 'medical_centers',
        'fields': [
            ('name', 'text'), 
            ('address', 'text'),
            ('website', 'text')
        ],
        'name': 'medical_center_text_search'
    },
    {
        'collection': 'appointments',
        'fields': [
            ('notes', 'text'),
            ('medical_conditions', 'text'),
            ('reason_for_visit', 'text'),
            ('medications', 'text'),
            ('allergies', 'text')
        ],
        'name': 'appointment_text_search'
    },
    {
        'collection': 'medical_examinations',
        'fields': [
            ('examination_type', 'text'), 
            ('results', 'text'), 
            ('recommendations', 'text'),
            ('patient_name', 'text'),
            ('doctor_name', 'text')
        ],
        'name': 'examination_text_search'
    },
    {
        'collection': 'availability_exceptions',
        'fields': [('reason', 'text')],
        'name': 'exception_reason_search'
    },
    {
        'collection': 'doctor_booking_history',
        'fields': [('bookings.patient_name', 'text')],
        'name': 'booking_patient_search'
    }
]
# Add MongoDB-specific settings
DJONGO_MANAGED_COLLECTIONS = True


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
